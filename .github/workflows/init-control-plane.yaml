name: Initialize Kubernetes Cluster

on:
  workflow_dispatch:

  workflow_run:
    workflows: ["Provision K8s Infrastructure"]
    types:
      - completed

jobs:
  init-k8s:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      CONTROL_PLANE_TAG_NAME: control-plane
      REGION: us-west-1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Get Control Plane IP by EC2 tag
      id: get-ip
      run: |
        echo "üîç Finding control plane IP by tag..."
        CONTROL_PLANE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ env.CONTROL_PLANE_TAG_NAME }}" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        echo "‚úÖ Found IP: $CONTROL_PLANE_IP"
        echo "CONTROL_PLANE_IP=$CONTROL_PLANE_IP" >> $GITHUB_ENV

    - name: Save SSH private key to file
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Wait until Kubernetes is ready
      run: |
        echo "‚è≥ Waiting for Kubernetes setup to complete..."
        for i in {1..30}; do
          if ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.CONTROL_PLANE_IP }} 'test -f /etc/kubernetes/admin.conf'; then
            echo "‚úÖ Kubernetes is ready"
            break
          else
            echo "Still waiting... attempt $i"
            sleep 10
          fi
        done

    - name: Upload init script to control plane instance
      run: |
        echo "üì§ Uploading init script to EC2..."
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa scripts/init_control_plane.sh ubuntu@${{ env.CONTROL_PLANE_IP }}:/home/ubuntu/init_control_plane.sh

    - name: Run init script on control plane
      run: |
        echo "üöÄ Running kubeadm init on EC2..."
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.CONTROL_PLANE_IP }} 'bash /home/ubuntu/init_control_plane.sh'
